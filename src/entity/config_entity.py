'''
This file contains all the configuration related to data ingestion, data validation,
data preprocessing, model training, model evaluation, model deployment.

Author: Saurabh bhardwaj
Date: Oct 2023
'''

# import necessary libraries
import os
from datetime import datetime
from src.constant import training_pipeline


class TrainingPipelineConfig:
    '''
    Training pipeline configuration class.
    '''

    def __init__(self, timestamp=datetime.now()):
        timestamp = timestamp.strftime("%m_%d_%Y_%H_%M_%S")
        self.pipeline_name: str = training_pipeline.PIPELINE_NAME
        self.artifact_dir: str = os.path.join(
            training_pipeline.ARTIFACT_DIR, timestamp)
        self.timestamp: str = timestamp


class DataIngestionConfig:
    '''
    Data Ingestion configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.data_ingestion_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.DATA_INGESTION_DIR_NAME,
        )
        self.feature_store_file_path: str = os.path.join(
            self.data_ingestion_dir,
            training_pipeline.DATA_INGESTION_FEATURE_STORE_DIR,
            training_pipeline.FILE_NAME,
        )
        self.training_file_path: str = os.path.join(
            self.data_ingestion_dir,
            training_pipeline.DATA_INGESTION_DATA_STORE_DIR,
            training_pipeline.TRAIN_FILE_NAME,
        )
        self.testing_file_path: str = os.path.join(
            self.data_ingestion_dir,
            training_pipeline.DATA_INGESTION_DATA_STORE_DIR,
            training_pipeline.TEST_FILE_NAME,
        )
        self.train_test_split_ratio: float = training_pipeline.DATA_INGESTION_TRAIN_TEST_SPLIT_RATIO


class DataValidationConfig:
    '''
    Data validation configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.data_validation_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.DATA_VALIDATION_DIR_NAME)
        self.valid_data_dir: str = os.path.join(
            self.data_validation_dir,
            training_pipeline.DATA_VALIDATION_VALID_DIR)
        self.invalid_data_dir: str = os.path.join(
            self.data_validation_dir,
            training_pipeline.DATA_VALIDATION_INVALID_DIR)
        self.valid_file_path: str = os.path.join(
            self.valid_data_dir, training_pipeline.FILE_NAME
        )
        self.invalid_file_path: str = os.path.join(
            self.invalid_data_dir, training_pipeline.FILE_NAME
        )
        self.drift_report_file_path: str = os.path.join(
            self.data_validation_dir,
            training_pipeline.DATA_VALIDATION_DRIFT_REPORT_DIR,
            training_pipeline.DATA_VALIDATION_DRIFT_REPORT_FILE_NAME,
        )


class DataPreprocessingConfig:
    '''
    Data preprocessing configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.data_preprocessing_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.DATA_PREPROCESSING_DATA_DIR)
        self.preprocess_train_file_path: str = os.path.join(
            self.data_preprocessing_dir,
            training_pipeline.DATA_PREPROCESSING_DIR_NAME,
            training_pipeline.TRAIN_FILE_NAME.replace(
                "csv",
                "npy"))
        self.preprocess_test_file_path: str = os.path.join(
            self.data_preprocessing_dir,
            training_pipeline.DATA_PREPROCESSING_DIR_NAME,
            training_pipeline.TEST_FILE_NAME.replace(
                "csv",
                "npy"))
        self.preprocessed_object_file_path: str = os.path.join(
            self.data_preprocessing_dir,
            training_pipeline.DATA_PREPROCESSING_PREPROCESSOR_OBJECT_DIR,
            training_pipeline.PREPROCESSING_OBJECT_FILE_NAME)


class ModelTrainerConfig:
    '''
    Model trainer configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.model_trainer_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.MODEL_TRAINER_DIR_NAME)
        self.trained_model_file_path: str = os.path.join(
            self.model_trainer_dir,
            training_pipeline.MODEL_TRAINER_TRAINED_MODEL_DIR,
            training_pipeline.MODEL_FILE_NAME)
        self.train_test_split_ratio: float = training_pipeline.DATA_TRAINER_TRAIN_TEST_SPLIT_RATION
        self.expected_accuracy: float = training_pipeline.MODEL_TRAINER_EXPECTED_SCORE
        self.overfitting_underfitting_threshold = training_pipeline.MODEL_TRAINER_OVER_FIITING_UNDER_FITTING_THRESHOLD


class ModelEvaluationConfig:
    '''
    Model Evaluation configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.model_evaluation_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.MODEL_EVALUATION_DIR_NAME)
        self.report_file_path = os.path.join(
            self.model_evaluation_dir,
            training_pipeline.MODEL_EVALUATION_REPORT_NAME)
        self.change_threshold = training_pipeline.MODEL_EVALUATION_CHANGED_THRESHOLD_SCORE


class ModelPusherConfig:
    '''
    Model pusher configuration class.
    '''
    def __init__(self, training_pipeline_config: TrainingPipelineConfig):
        self.model_evaluation_dir: str = os.path.join(
            training_pipeline_config.artifact_dir,
            training_pipeline.MODEL_PUSHER_DIR_NAME)
        self.model_file_path = os.path.join(
            self.model_evaluation_dir,
            training_pipeline.MODEL_FILE_NAME)
        timestamp = round(datetime.now().timestamp())
        self.saved_model_path = os.path.join(
            training_pipeline.SAVED_MODEL_DIR,
            f"{timestamp}",
            training_pipeline.MODEL_FILE_NAME)
