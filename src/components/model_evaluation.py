'''
This module contains model evaluation pipeline which
evaluates the trained model on test data and
gives the model performance metrics

author: Saurabh Bhardwaj
date: October 2023
'''

import sys
import pandas as pd

from src.exception import MalwareException
from src.logger import logging
from src.entity.artifact_entity import ModelTrainerArtifact, ModelEvaluationArtifact, DataValidationArtifact
from src.entity.config_entity import ModelEvaluationConfig
from src.ml.metric.classification_metric import get_classification_score
from src.utils.main_utils import load_object, write_yaml_file
from src.ml.model.estimator import ModelResolver
from src.constant.training_pipeline import TARGET_COLUMN
from src.data_access.malware_data import MicrosoftMalwareData


class ModelEvaluation:
    '''
    Class for model evaluation.
    '''

    def __init__(self, model_eval_config: ModelEvaluationConfig,
                 data_validation_artifact: DataValidationArtifact,
                 model_trainer_artifact: ModelTrainerArtifact):
        """
        Initialize the ModelEvaluation class.

        Args:
            model_eval_config (ModelEvaluationConfig): Model evaluation configuration.
            data_validation_artifact (DataValidationArtifact): Data validation artifact.
            model_trainer_artifact (ModelTrainerArtifact): Model trainer artifact.

        Raises:
            MalwareException: If an exception occurs during initialization.
        """
        try:
            self.model_eval_config = model_eval_config
            self.data_validation_artifact = data_validation_artifact
            self.model_trainer_artifact = model_trainer_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_model_evaluation(self) -> ModelEvaluationArtifact:
        """
        Perform model evaluation and comparison.

        Returns:
            ModelEvaluationArtifact: Model evaluation artifact.

        Raises:
            MalwareException: If an exception occurs during model evaluation.
        """
        try:
            logging.info("Reading data from data validation artifact")
            valid_train_file_path = self.data_validation_artifact.valid_train_file_path
            valid_test_file_path = self.data_validation_artifact.valid_test_file_path

            # Valid train and test file dataframes
            train_df = MicrosoftMalwareData(valid_train_file_path).read_data()
            test_df = MicrosoftMalwareData(valid_test_file_path).read_data()

            logging.info("Merging train and test dataframe ")
            df = pd.concat([train_df, test_df])
            y_true = df[TARGET_COLUMN]

            df.drop(TARGET_COLUMN, axis=1, inplace=True)

            train_model_file_path = self.model_trainer_artifact.trained_model_file_path
            model_resolver = ModelResolver()
            is_model_accepted = True

            # If model is not available then return
            logging.info("Checking if model is available")
            if not model_resolver.is_model_exists():
                model_evaluation_artifact = ModelEvaluationArtifact(
                    is_model_accepted=is_model_accepted,
                    improved_accuracy=None,
                    best_model_path=None,
                    trained_model_path=train_model_file_path,
                    train_model_metric_artifact=self.model_trainer_artifact.test_metric_artifact,
                    best_model_metric_artifact=None)
                logging.info(
                    f"Model evaluation artifact: {model_evaluation_artifact}")
                return model_evaluation_artifact

            logging.info("Loading the latest model")
            latest_model_path = model_resolver.get_best_model_path()
            latest_model = load_object(file_path=latest_model_path)
            train_model = load_object(file_path=train_model_file_path)

            logging.info("Evaluating the model")
            y_trained_pred = train_model.predict(df)
            y_latest_pred = latest_model.predict(df)

            trained_metric = get_classification_score(y_true, y_trained_pred)
            latest_metric = get_classification_score(y_true, y_latest_pred)

            logging.info("Comparing the model")
            improved_accuracy = trained_metric.f1_score - latest_metric.f1_score
            if self.model_eval_config.change_threshold < improved_accuracy:
                is_model_accepted = True
            else:
                is_model_accepted = False

            logging.info("Saving the model evaluation artifact")
            model_evaluation_artifact = ModelEvaluationArtifact(
                is_model_accepted=is_model_accepted,
                improved_accuracy=improved_accuracy,
                best_model_path=latest_model_path,
                trained_model_path=train_model_file_path,
                train_model_metric_artifact=trained_metric,
                best_model_metric_artifact=latest_metric)

            model_eval_report = model_evaluation_artifact.__dict__

            # Save the report
            write_yaml_file(
                self.model_eval_config.report_file_path,
                model_eval_report)
            logging.info(
                f"Model evaluation artifact: {model_evaluation_artifact}")
            return model_evaluation_artifact

        except Exception as e:
            raise MalwareException(e, sys)
