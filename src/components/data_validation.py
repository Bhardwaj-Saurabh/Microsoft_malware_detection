'''
This module contains data validation pipeline which
checks data drift, check number of columns, check
numerical columns and check data type of numerical
columns.

author: Saurabh Bhardwaj
date: October 2023
'''

import os
import sys
import pandas as pd
from scipy.stats import ks_2samp

from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.entity.artifact_entity import DataIngestionArtifact, DataValidationArtifact
from src.entity.config_entity import DataValidationConfig
from src.exception import MalwareException
from src.data_access.malware_data import MicrosoftMalwareData
from src.logger import logging
from src.utils.main_utils import read_yaml_file, write_yaml_file


class DataValidation:
    '''
    Class for data validation.
    '''

    def __init__(self, data_ingestion_artifact: DataIngestionArtifact,
                 data_validation_config: DataValidationConfig):
        """
        Initialize the DataValidation class.

        Args:
            data_ingestion_artifact (DataIngestionArtifact): Data ingestion artifact.
            data_validation_config (DataValidationConfig): Configuration for data validation.

        Raises:
            MalwareException: If an exception occurs during initialization.
        """
        try:
            self.data_ingestion_artifact = data_ingestion_artifact
            self.data_validation_config = data_validation_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e, sys)

    def validate_number_of_columns(self, dataframe: pd.DataFrame) -> bool:
        """
        Validate if the number of columns in the given dataframe matches the required number of columns.

        Args:
            dataframe (pd.DataFrame): DataFrame to be validated.

        Returns:
            bool: True if the number of columns matches, False otherwise.

        Raises:
            MalwareException: If an exception occurs during validation.
        """
        try:
            number_of_columns = dataframe.shape[1]
            logging.info(f"Required number of columns: {number_of_columns}")
            logging.info(f"Data frame has columns: {len(dataframe.columns)}")
            if len(dataframe.columns) == number_of_columns:
                return True
            return False
        except Exception as e:
            raise MalwareException(e, sys)

    def is_numerical_column_exist(self, dataframe: pd.DataFrame) -> bool:
        """
        Validate if the required numerical columns exist in the given dataframe.

        Args:
            dataframe (pd.DataFrame): DataFrame to be validated.

        Returns:
            bool: True if the required numerical columns exist, False otherwise.

        Raises:
            MalwareException: If an exception occurs during validation.
        """
        try:
            numerical_columns = self._schema_config["numerical_columns"]
            dataframe_columns = dataframe.columns

            numerical_column_present = True
            missing_numerical_columns = []
            for num_column in numerical_columns:
                if num_column not in dataframe_columns:
                    numerical_column_present = False
                    missing_numerical_columns.append(num_column)

            logging.info(
                f"Missing numerical columns: [{missing_numerical_columns}]")
            return numerical_column_present
        except Exception as e:
            raise MalwareException(e, sys)

    def detect_dataset_drift(
            self,
            base_df,
            current_df,
            threshold=0.05) -> bool:
        """
        Detect dataset drift by comparing two dataframes.

        Args:
            base_df: Base dataframe for comparison.
            current_df: Current dataframe for comparison.
            threshold (float): Threshold for drift detection (default 0.05).

        Returns:
            bool: True if no drift is detected, False if drift is detected.

        Raises:
            MalwareException: If an exception occurs during drift detection.
        """
        try:
            status = True
            report = {}
            for column in base_df.columns:
                d1 = base_df[column]
                d2 = current_df[column]
                if d1.dtype == 'int':
                    is_same_dist = ks_2samp(d1, d2)
                    if threshold <= is_same_dist.pvalue:
                        is_found = False
                    else:
                        is_found = True
                        status = False
                    report.update({column: {
                        "p_value": float(is_same_dist.pvalue),
                        "drift_status": is_found
                    }})

            drift_report_file_path = self.data_validation_config.drift_report_file_path

            # Create directory
            dir_path = os.path.dirname(drift_report_file_path)
            os.makedirs(dir_path, exist_ok=True)
            write_yaml_file(file_path=drift_report_file_path, content=report)
            return status
        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_data_validation(self) -> DataValidationArtifact:
        """
        Perform data validation on the training and testing datasets.

        Returns:
            DataValidationArtifact: Data validation artifact.

        Raises:
            MalwareException: If an exception occurs during data validation.
        """
        try:
            error_message = ""
            train_file_path = self.data_ingestion_artifact.trained_file_path
            test_file_path = self.data_ingestion_artifact.test_file_path

            # Reading data from train and test file location
            train_dataframe = MicrosoftMalwareData(train_file_path).read_data()
            test_dataframe = MicrosoftMalwareData(test_file_path).read_data()

            # Validate number of columns
            logging.info("Validating number of columns in the dataframe")
            status = self.validate_number_of_columns(dataframe=train_dataframe)
            if not status:
                error_message = f"{error_message}Train dataframe does not contain all columns.\n"
            status = self.validate_number_of_columns(dataframe=test_dataframe)
            if not status:
                error_message = f"{error_message}Test dataframe does not contain all columns.\n"

            # Validate numerical columns
            logging.info("Validating numerical columns in the dataframe")
            status = self.is_numerical_column_exist(dataframe=train_dataframe)
            if not status:
                error_message = f"{error_message}Train dataframe does not contain all numerical columns.\n"
            status = self.is_numerical_column_exist(dataframe=test_dataframe)
            if not status:
                error_message = f"{error_message}Test dataframe does not contain all numerical columns.\n"

            if len(error_message) > 0:
                raise Exception(error_message)

            # Check for data drift
            logging.info("Checking for data drift")
            status = self.detect_dataset_drift(
                base_df=train_dataframe, current_df=test_dataframe)

            # Create data validation artifact
            data_validation_artifact = DataValidationArtifact(
                validation_status=status,
                valid_train_file_path=self.data_ingestion_artifact.trained_file_path,
                valid_test_file_path=self.data_ingestion_artifact.test_file_path,
                invalid_train_file_path=None,
                invalid_test_file_path=None,
                drift_report_file_path=self.data_validation_config.drift_report_file_path,
            )

            logging.info(
                f"Data validation artifact: {data_validation_artifact}")

            return data_validation_artifact
        except Exception as e:
            raise MalwareException(e, sys)
