'''
This module contains model training pipeline which
train the model as per the given config

author: Saurabh Bhardwaj
date: October 2023
'''

from src.utils.main_utils import load_numpy_array_data
from src.exception import MalwareException
from src.logger import logging
from src.entity.artifact_entity import DataPreprocessArtifact, ModelTrainerArtifact
from src.entity.config_entity import ModelTrainerConfig
import os
import sys
from lightgbm import LGBMClassifier
from src.ml.metric.classification_metric import get_classification_score
from src.ml.model.estimator import MalwareModel
from src.utils.main_utils import save_object
from src.constant.training_pipeline import RANDOM_STATE
from src.utils.main_utils import load_object
from src.utils.main_utils import read_yaml_file
from src.constant.training_pipeline import SCHEMA_FILE_PATH


class ModelTrainer:

    def __init__(self, model_trainer_config: ModelTrainerConfig,
                 data_preprocess_artifact: DataPreprocessArtifact):
        try:
            self.model_trainer_config = model_trainer_config
            self.data_preprocess_artifact = data_preprocess_artifact
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e, sys)

    def train_model(self, x_train, y_train):
        try:
            lgb_clf = LGBMClassifier(
                learning_rate=self._schema_config['model_config']['learning_rate'],
                max_depth=self._schema_config['model_config']['max_depth'],
                n_estimators=self._schema_config['model_config']['n_estimators'],
                min_child_samples=self._schema_config['model_config']['min_child_samples'],
                n_jobs=self._schema_config['model_config']['n_jobs'],
                num_leaves=self._schema_config['model_config']['num_leaves'],
                random_state=RANDOM_STATE,
                reg_alpha=self._schema_config['model_config']['reg_alpha'])

            lgb_clf.fit(x_train, y_train)
            return lgb_clf
        except Exception as e:
            raise e

    def perform_hyper_paramter_tunig(self): ...

    def initiate_model_trainer(self) -> ModelTrainerArtifact:
        try:
            train_file_path = self.data_preprocess_artifact.preprocessed_train_file_path
            test_file_path = self.data_preprocess_artifact.preprocessed_test_file_path

            # loading training array and testing array
            train_arr = load_numpy_array_data(train_file_path)
            test_arr = load_numpy_array_data(test_file_path)

            x_train, y_train, x_test, y_test = (
                train_arr[:, :-1],
                train_arr[:, -1],
                test_arr[:, :-1],
                test_arr[:, -1],
            )
            model = self.train_model(x_train, y_train)
            y_train_pred = model.predict(x_train)
            classification_train_metric = get_classification_score(
                y_true=y_train, y_pred=y_train_pred)

            if classification_train_metric.f1_score <= self.model_trainer_config.expected_accuracy:
                raise Exception(
                    "Trained model is not good to provide expected accuracy")

            y_test_pred = model.predict(x_test)
            classification_test_metric = get_classification_score(
                y_true=y_test, y_pred=y_test_pred)

            preprocessor = load_object(
                file_path=self.data_preprocess_artifact.preprocessed_object_file_path)

            model_dir_path = os.path.dirname(
                self.model_trainer_config.trained_model_file_path)
            os.makedirs(model_dir_path, exist_ok=True)
            malware_model = MalwareModel(
                model=model, preprocessor=preprocessor)
            save_object(
                self.model_trainer_config.trained_model_file_path,
                obj=malware_model)

            # model trainer artifact

            model_trainer_artifact = ModelTrainerArtifact(
                trained_model_file_path=self.model_trainer_config.trained_model_file_path,
                train_metric_artifact=classification_train_metric,
                test_metric_artifact=classification_test_metric)
            logging.info(f"Model trainer artifact: {model_trainer_artifact}")
            return model_trainer_artifact
        except Exception as e:
            raise MalwareException(e, sys)
