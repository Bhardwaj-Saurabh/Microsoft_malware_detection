from src.utils.main_utils import load_numpy_array_data
from src.exception import MalwareException
from src.logger import logging
from src.entity.artifact_entity import DataTransformationArtifact,ModelTrainerArtifact
from src.entity.config_entity import ModelTrainerConfig
import os,sys
from lightgbm import LGBMClassifier
from src.ml.metric.classification_metric import get_classification_score
from src.ml.model.estimator import MalwareModel
from src.utils.main_utils import save_object
from sklearn.model_selection import train_test_split
class ModelTrainer:

    def __init__(self,model_trainer_config:ModelTrainerConfig,
        data_transformation_artifact:DataTransformationArtifact):
        try:
            self.model_trainer_config=model_trainer_config
            self.data_transformation_artifact=data_transformation_artifact
        except Exception as e:
            raise MalwareException(e,sys)

    def perform_hyper_paramter_tunig(self):...
    

    def train_model(self,x_train,y_train):
        try:
            lgbc_clf = LGBMClassifier()
            lgbc_clf.fit(x_train,y_train)
            return lgbc_clf
        except Exception as e:
            raise e
    
    def initiate_model_trainer(self)->ModelTrainerArtifact:
        try:
            feature_file_path = self.data_transformation_artifact.transformed_feature_file_path
            label_file_path = self.data_transformation_artifact.transformed_label_file_path

            #loading training array and testing array
            X = load_numpy_array_data(feature_file_path)
            y = load_numpy_array_data(label_file_path)

            x_train, y_train, x_test, y_test = train_test_split(
                X, y, test_size=self.model_trainer_config.train_test_split_ratio, random_state=16
            )

            model = self.train_model(x_train, y_train)
            y_train_pred = model.predict(x_train)
            classification_train_metric =  get_classification_score(y_true=y_train, y_pred=y_train_pred)
            
            if classification_train_metric.f1_score<=self.model_trainer_config.expected_accuracy:
                raise Exception("Trained model is not good to provide expected accuracy")
            
            y_test_pred = model.predict(x_test)
            classification_test_metric = get_classification_score(y_true=y_test, y_pred=y_test_pred)


            #Overfitting and Underfitting
            diff = abs(classification_train_metric.f1_score-classification_test_metric.f1_score)
            
            if diff>self.model_trainer_config.overfitting_underfitting_threshold:
                raise Exception("Model is not good try to do more experimentation.")

            #preprocessor = load_object(file_path=self.data_transformation_artifact.transformed_object_file_path)
            
            model_dir_path = os.path.dirname(self.model_trainer_config.trained_model_file_path)
            os.makedirs(model_dir_path,exist_ok=True)
            malware_model = MalwareModel(model=model)
            save_object(self.model_trainer_config.trained_model_file_path, obj=malware_model)

            #model trainer artifact

            model_trainer_artifact = ModelTrainerArtifact(trained_model_file_path=self.model_trainer_config.trained_model_file_path, 
            train_metric_artifact=classification_train_metric,
            test_metric_artifact=classification_test_metric)
            logging.info(f"Model trainer artifact: {model_trainer_artifact}")
            return model_trainer_artifact
        except Exception as e:
            raise MalwareException(e,sys)