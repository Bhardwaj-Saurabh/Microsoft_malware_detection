import sys, os

import numpy as np
import pandas as pd
from pandas import DataFrame

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import RobustScaler
from sklearn.pipeline import Pipeline

from src.constant.training_pipeline import TARGET_COLUMN
from src.entity.artifact_entity import (
    DataTransformationArtifact,
    DataPreprocessArtifact,
    DataIngestionArtifact
)
from src.entity.config_entity import DataTransformationConfig
from src.exception import MalwareException
from src.logger import logging
from src.constant.training_pipeline import SCHEMA_FILE_PATH
#from src.ml.model.estimator import TargetValueMapping
from src.utils.main_utils import save_object, read_yaml_file, save_numpy_array_data


class DataTransformation:
    def __init__(self,data_preprocess_artifact: DataPreprocessArtifact, 
                 data_ingestion_artifact:DataIngestionArtifact,
                    data_transformation_config: DataTransformationConfig,):
        """
        :param data_validation_artifact: Output reference of data ingestion artifact stage
        :param data_transformation_config: configuration for data transformation
        """
        try:
            self.data_preprocess_artifact = data_preprocess_artifact
            self.data_ingestion_artifact = data_ingestion_artifact
            self.data_transformation_config = data_transformation_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)

        except Exception as e:
            raise MalwareException(e, sys)


    @staticmethod
    def read_data(file_path) -> pd.DataFrame:
        try:
            return pd.read_csv(file_path)
        except Exception as e:
            raise MalwareException(e, sys)

    def encoding_processor(self, df:DataFrame)->DataFrame:
        try:
            categorical_columns = read_yaml_file(self.data_ingestion_artifact.ingestion_report_file_path)
            categorical_columns_list = categorical_columns['categorical_columns']

            engineered_feature = read_yaml_file(self.data_preprocess_artifact.preprocess_report_file_path)
            engineered_feature_columns = engineered_feature['engineered_feature']

            categorical_columns_all = categorical_columns_list + engineered_feature_columns

            # Convert dtype of categorical variables to category
            for col in categorical_columns_all:
                if col in df.columns:
                    df[col] = df[col].astype('category')
                else:
                    categorical_columns_all.remove(col)

            # Frequency encoding variables
            frequency_encoded_variables = []
            for col in categorical_columns_all:
                if df[col].nunique() > 30:
                    frequency_encoded_variables.append(col)

            # Frequency enocde the variables
            for variable in frequency_encoded_variables:
                # group by frequency 
                fq = df.groupby(variable).size()/len(df)    
                
                # mapping values to dataframe 
                df.loc[:, "{}".format(variable)] = df[variable].map(fq)   
                categorical_columns_all.remove(variable)

            # Label Encoding
            indexer = {}
            for col in categorical_columns_all:
                _, indexer[col] = pd.factorize(df[col])
                df[col] = indexer[col].get_indexer(df[col])

            transformed_data_file_path = self.data_transformation_config.transformed_data_file_path
            dir_path = os.path.dirname(transformed_data_file_path)
            os.makedirs(dir_path, exist_ok=True)

            df.to_csv(transformed_data_file_path, index=False,header=True)
            return df

        except Exception as e:
            raise MalwareException(e,sys) 

    @staticmethod
    def split_data_as_feature_and_label(df:DataFrame):
        try:
            
            X = df.drop([TARGET_COLUMN], axis = 1).values
            y = df[[TARGET_COLUMN]].values
            
            return X, y
        except Exception as e:
            raise MalwareException(e, sys)
            
    def initiate_data_transformation(self,) -> DataTransformationArtifact:
        try:
            
            df = DataTransformation.read_data(self.data_preprocess_artifact.preprocess_data_file_path)
            df = self.encoding_processor(df)
            X, y = DataTransformation.split_data_as_feature_and_label(df)


            #save numpy array data
            save_numpy_array_data( self.data_transformation_config.transformed_feature_file_path, array=X,)
            save_numpy_array_data( self.data_transformation_config.transformed_label_file_path, array=y,)
            #save_object( self.data_transformation_config.transformed_object_file_path, preprocessor_object,)
            
            
            #preparing artifact
            data_transformation_artifact = DataTransformationArtifact(
                transformed_object_file_path=self.data_transformation_config.transformed_object_file_path,
                transformed_feature_file_path=self.data_transformation_config.transformed_feature_file_path,
                transformed_label_file_path=self.data_transformation_config.transformed_label_file_path,
                transformed_data_file_path = self.data_transformation_config.transformed_data_file_path
            )
            logging.info(f"Data transformation artifact: {data_transformation_artifact}")
            return data_transformation_artifact
        except Exception as e:
            raise MalwareException(e, sys) from e