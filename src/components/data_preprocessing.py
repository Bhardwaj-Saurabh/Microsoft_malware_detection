from distutils import dir_util
from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.entity.artifact_entity import DataValidationArtifact, DataPreprocessArtifact
from src.entity.config_entity import DataPreprocessingConfig
from src.components.data_validation import DataValidation 
from src.exception import MalwareException
from src.logger import logging
from src.utils.main_utils import read_yaml_file, write_yaml_file
import pandas as pd
from pandas import DataFrame
import os,sys
from scipy.stats import ks_2samp
from sklearn.model_selection import train_test_split


class DataPreprocess:

    def __init__(self, data_validation_artifact:DataValidationArtifact,
                 data_preprocessing_config:DataPreprocessingConfig):
        try:
            self.data_validation_artifact=data_validation_artifact
            self.data_preprocessing_config=data_preprocessing_config
            #self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise  MalwareException(e,sys)
    
    def drop_zero_std_columns(self,dataframe):
        pass

    @staticmethod
    def read_data(file_path)->pd.DataFrame:
        try:
            return pd.read_csv(file_path)
        except Exception as e:
            raise MalwareException(e,sys)   
        
    def split_data_as_train_test(self, dataframe: DataFrame) -> None:
        """
        Feature store dataset will be split into train and test file
        """

        try:
            train_set, test_set = train_test_split(
                dataframe, test_size=self.data_preprocessing_config.train_test_split_ratio
            )

            logging.info("Performed train test split on the dataframe")

            logging.info(
                "Exited split_data_as_train_test method of Data_Ingestion class"
            )

            dir_path = os.path.dirname(self.data_preprocessing_config.preprocessing_train_file_path)

            os.makedirs(dir_path, exist_ok=True)

            logging.info(f"Exporting train and test file path.")

            train_set.to_csv(
                self.data_preprocessing_config.preprocessing_train_file_path, index=False, header=True
            )

            test_set.to_csv(
                self.data_preprocessing_config.preprocessing_test_file_path, index=False, header=True
            )

            logging.info(f"Exported train and test file path.")
        except Exception as e:
            raise MalwareException(e,sys)
        
    def detect_dataset_drift(self,base_df,current_df,threshold=0.05)->bool:
        try:
            status=True
            report ={}
            for column in base_df.columns:
                d1 = base_df[column]
                d2  = current_df[column]
                if d1.dtype == 'int':
                    is_same_dist = ks_2samp(d1,d2)
                    if threshold<=is_same_dist.pvalue:
                        is_found=False
                    else:
                        is_found = True 
                        status=False
                    report.update({column:{
                        "p_value":float(is_same_dist.pvalue),
                        "drift_status":is_found
                        
                        }})
                
            drift_report_file_path = self.data_preprocessing_config.drift_report_file_path
            
            #Create directory
            dir_path = os.path.dirname(drift_report_file_path)
            os.makedirs(dir_path,exist_ok=True)
            write_yaml_file(file_path=drift_report_file_path,content=report,)
            return status
        except Exception as e:
            raise MalwareException(e,sys)

    def initiate_data_preprocessing(self)->DataPreprocessArtifact:
        try:
            file_path = self.data_validation_artifact.valid_file_path

            #Reading data from train and test file location
            dataframe = DataValidation.read_data(file_path)
            self.split_data_as_train_test(dataframe=dataframe)

            data_preprocess_artifact = DataPreprocessArtifact(
                preprocess_train_file_path=self.data_preprocessing_config.preprocessing_test_file_path,
                preprocess_test_file_path=self.data_preprocessing_config.preprocessing_test_file_path,
                # drift_report_file_path =self.data_preprocessing_config.drift_report_file_path
            )

            logging.info(f"Data Preprocess artifact: {data_preprocess_artifact}")

            return data_preprocess_artifact
        except Exception as e:
            raise MalwareException(e,sys)