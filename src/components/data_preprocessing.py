from distutils import dir_util
from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.entity.artifact_entity import DataValidationArtifact, DataPreprocessArtifact
from src.entity.config_entity import DataPreprocessingConfig
from src.components.data_validation import DataValidation 
from src.exception import MalwareException
from src.logger import logging
from src.utils.main_utils import read_yaml_file, write_yaml_file
import pandas as pd
from pandas import DataFrame
import os,sys
from sklearn.model_selection import train_test_split


class DataPreprocess:

    def __init__(self, data_validation_artifact:DataValidationArtifact,
                 data_preprocessing_config:DataPreprocessingConfig):
        try:
            self.data_validation_artifact=data_validation_artifact
            self.data_preprocessing_config=data_preprocessing_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise  MalwareException(e,sys)

    @staticmethod
    def read_data(file_path)->pd.DataFrame:
        try:
            return pd.read_csv(file_path)
        except Exception as e:
            raise MalwareException(e,sys)   

    def feature_engineering(self, df:DataFrame):
        try:
            engineered_feature  = {}
            catergorical_engineed_features = []
            # Engine Version
            df['EngineVersion_2'] = df['EngineVersion'].apply(lambda x: x.split('.')[2]).astype('category')
            df['EngineVersion_3'] = df['EngineVersion'].apply(lambda x: x.split('.')[3]).astype('category')
            catergorical_engineed_features.append('EngineVersion_2')
            catergorical_engineed_features.append('EngineVersion_3')


            # App version 
            df['AppVersion_1'] = df['AppVersion'].apply(lambda x: x.split('.')[1]).astype('category')
            df['AppVersion_2'] = df['AppVersion'].apply(lambda x: x.split('.')[2]).astype('category')
            df['AppVersion_3'] = df['AppVersion'].apply(lambda x: x.split('.')[3]).astype('category')
            catergorical_engineed_features.append('AppVersion_1')
            catergorical_engineed_features.append('AppVersion_2')
            catergorical_engineed_features.append('AppVersion_3')

            # Anti Virus Version
            df['AvSigVersion_0'] = df['AvSigVersion'].apply(lambda x: x.split('.')[0]).astype('category')
            df['AvSigVersion_1'] = df['AvSigVersion'].apply(lambda x: x.split('.')[1]).astype('category')
            df['AvSigVersion_2'] = df['AvSigVersion'].apply(lambda x: x.split('.')[2]).astype('category')
            catergorical_engineed_features.append('AvSigVersion_0')
            catergorical_engineed_features.append('AvSigVersion_0')
            catergorical_engineed_features.append('AvSigVersion_0')

            # Operating System Lab

            # Replace NA values of 'OsBuildLab' column with '0.0.0.0-0'
            df['OsBuildLab']   = df['OsBuildLab'].fillna('0.0.0.0.0-0')

            df['OsBuildLab_0'] = df['OsBuildLab'].apply(lambda x: x.split('.')[0]).astype('category')
            df['OsBuildLab_1'] = df['OsBuildLab'].apply(lambda x: x.split('.')[1]).astype('category')
            df['OsBuildLab_2'] = df['OsBuildLab'].apply(lambda x: x.split('.')[2]).astype('category')
            df['OsBuildLab_3'] = df['OsBuildLab'].apply(lambda x: x.split('.')[3]).astype('category')
            catergorical_engineed_features.append('OsBuildLab_0')
            catergorical_engineed_features.append('OsBuildLab_1')
            catergorical_engineed_features.append('OsBuildLab_2')
            catergorical_engineed_features.append('OsBuildLab_3')

            # Operating System Version
            df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[0]).astype('category')
            df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[1]).astype('category')
            df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[2]).astype('category')
            df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[3]).astype('category')
            catergorical_engineed_features.append('Census_OSVersion_0')
            catergorical_engineed_features.append('Census_OSVersion_1')
            catergorical_engineed_features.append('Census_OSVersion_2')
            catergorical_engineed_features.append('Census_OSVersion_3')

            # Storage 
            df['primary_drive_c_ratio'] = df['Census_SystemVolumeTotalCapacity'] / df['Census_PrimaryDiskTotalCapacity']
            df['non_primary_drive_MB']  = df['Census_PrimaryDiskTotalCapacity'] - df['Census_SystemVolumeTotalCapacity']

            # Aspect Ratio 
            df['aspect_ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal']/ df['Census_InternalPrimaryDisplayResolutionVertical']

            # Monitor Dimensions
            df['monitor_dims'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'].astype(str) + '*' + df['Census_InternalPrimaryDisplayResolutionVertical'].astype('str')
            df['monitor_dims'] = df['monitor_dims'].astype('category')
            catergorical_engineed_features.append('monitor_dims')

            # DPI
            df['dpi'] = ((df['Census_InternalPrimaryDisplayResolutionHorizontal']**2 + df['Census_InternalPrimaryDisplayResolutionVertical']**2)**.5)/(df['Census_InternalPrimaryDiagonalDisplaySizeInInches'])
            df['dpi_square'] = df['dpi'] ** 2

            # MP
            df['MegaPixels'] = (df['Census_InternalPrimaryDisplayResolutionHorizontal'] * df['Census_InternalPrimaryDisplayResolutionVertical'])/1e6

            # Screen Area
            df['Screen_Area'] = (df['aspect_ratio']* (df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2))/(df['aspect_ratio']**2 + 1)
            
            # RAM per processor
            df['ram_per_processor'] = df['Census_TotalPhysicalRAM']/ df['Census_ProcessorCoreCount']

            # Arbitrary features
            df['new_num_0'] = df['Census_InternalPrimaryDiagonalDisplaySizeInInches'] / df['Census_ProcessorCoreCount']
            df['new_num_1'] = df['Census_ProcessorCoreCount'] * df['Census_InternalPrimaryDiagonalDisplaySizeInInches']

            engineered_feature['engineered_feature'] = catergorical_engineed_features

            preprocessing_report_file_path = self.data_preprocessing_config.preprocessing_report_file_path
            #Create directory
            dir_path = os.path.dirname(preprocessing_report_file_path)
            os.makedirs(dir_path,exist_ok=True)
            write_yaml_file(file_path=preprocessing_report_file_path,content=engineered_feature,)

            preprocessing_data_file_path = self.data_preprocessing_config.preprocessing_data_file_path          

            #creating folder
            dir_path = os.path.dirname(preprocessing_data_file_path)
            os.makedirs(dir_path,exist_ok=True)
            df.to_csv(preprocessing_data_file_path, index=False,header=True)
            return df

        except Exception as e:
            raise MalwareException(e,sys)  

    def missing_value_treatment_processor(self, df:DataFrame):
        # na value treatment
        try:
            for col in df:
                missing_value_percent = df[col].isnull().sum() * 100 / df.shape[0]
                if missing_value_percent >= 20:
                    df.drop(col,axis=1, inplace = True)
                else:
                    df = df[df[col].notna()]
        except Exception as e:
            raise MalwareException(e,sys)   

    def initiate_data_preprocessing(self)->DataPreprocessArtifact:
        try:
            file_path = self.data_validation_artifact.valid_file_path

            #Reading data from train and test file location
            dataframe = DataValidation.read_data(file_path)
            self.feature_engineering(dataframe)
            self.missing_value_treatment_processor(dataframe)


            data_preprocess_artifact = DataPreprocessArtifact(
                preprocess_data_file_path=self.data_preprocessing_config.preprocessing_data_file_path,
                preprocess_report_file_path = self.data_preprocessing_config.preprocessing_report_file_path
            )

            logging.info(f"Data Preprocess artifact: {data_preprocess_artifact}")

            return data_preprocess_artifact
        except Exception as e:
            raise MalwareException(e,sys)