'''
This module contains data preprocessing pipeline which
used frequency enconding, ordinal encoding and minmaxscaler to
transform training and test data.

author: Saurabh Bhardwaj
date: October 2023
'''

import sys
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
from feature_engine.encoding import CountFrequencyEncoder

from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.entity.artifact_entity import DataValidationArtifact, DataPreprocessArtifact
from src.entity.config_entity import DataPreprocessingConfig
from src.exception import MalwareException
from src.constant.training_pipeline import TARGET_COLUMN
from src.data_access.malware_data import MicrosoftMalwareData

from src.ml.preprocessor.preprocess import OrdinalEncoderTransformer
from src.logger import logging
from src.utils.main_utils import save_numpy_array_data, save_object, read_yaml_file


class DataPreprocess:
    '''
    Class for data preprocessing.
    '''

    def __init__(self, data_validation_artifact: DataValidationArtifact,
                 data_preprocessing_config: DataPreprocessingConfig):
        """
        Initialize the DataPreprocess class.

        Args:
            data_validation_artifact (DataValidationArtifact): 
                                     Data validation artifact.
            data_preprocessing_config (DataPreprocessingConfig): 
                          Configuration for data preprocessing.

        Raises:
            MalwareException: If an exception occurs during initialization.
        """
        try:
            self.data_validation_artifact = data_validation_artifact
            self.data_preprocessing_config = data_preprocessing_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e, sys)

    def pre_processor(self) -> Pipeline:
        """
        Define a data preprocessing pipeline.

        Returns:
            Pipeline: Data preprocessing pipeline.

        Raises:
            MalwareException: If an exception occurs during pipeline creation.
        """
        try:
            # Define the pipeline
            pipeline = Pipeline([
                # Frequency Encoding
                ('frequency_encoding', CountFrequencyEncoder(
                    variables=self._schema_config['frequency_columns'],
                    missing_values='ignore')),
                # Label Encoding
                ('label_encoding', OrdinalEncoderTransformer(
                    variables=self._schema_config['categorical_columns'])),
                # Min Max Scaler
                ('min_max_scaler', MinMaxScaler()),
            ])
            return pipeline
        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_data_preprocessing(self) -> DataPreprocessArtifact:
        """
        Perform data preprocessing on the training and testing datasets.

        Returns:
            DataPreprocessArtifact: Data preprocessing artifact.

        Raises:
            MalwareException: If an exception occurs during data preprocessing.
        """
        try:
            logging.info("Reading training dataset")
            train_df = MicrosoftMalwareData(
                self.data_validation_artifact.valid_train_file_path).read_data()
            logging.info("Reading testing dataset")
            test_df = MicrosoftMalwareData(
                self.data_validation_artifact.valid_test_file_path).read_data()

            # Calling data preprocessing object
            preprocessor = self.pre_processor()

            # Training dataframe
            input_feature_train_df = train_df.drop(
                columns=TARGET_COLUMN, axis=1)
            target_feature_train_df = train_df[TARGET_COLUMN]

            # Testing dataframe
            input_feature_test_df = test_df.drop(columns=TARGET_COLUMN, axis=1)
            target_feature_test_df = test_df[TARGET_COLUMN]

            # Converting to categorical
            logging.info(
                "Converting categorical columns  to categorical datatype")
            for col in self._schema_config['categorical_columns'] + \
                    self._schema_config['frequency_columns']:
                input_feature_train_df[col] = input_feature_train_df[col].astype(
                    'category')

            for col in self._schema_config['categorical_columns'] + \
                    self._schema_config['frequency_columns']:
                input_feature_test_df[col] = input_feature_test_df[col].astype(
                    'category')

            logging.info(
                "Calling data preprocessing pipeline and fit train and test data")
            preprocessor_object = preprocessor.fit(
                input_feature_train_df, target_feature_train_df)
            preprocessed_input_train_feature = preprocessor_object.transform(
                input_feature_train_df)
            preprocessed_input_test_feature = preprocessor_object.transform(
                input_feature_test_df)

            # Saving preprocessed data
            logging.info("Saving preprocessed data as numpy arrays")
            train_arr = np.c_[
                preprocessed_input_train_feature,
                np.array(target_feature_train_df)]
            test_arr = np.c_[
                preprocessed_input_test_feature,
                np.array(target_feature_test_df)]

            save_numpy_array_data(
                self.data_preprocessing_config.preprocess_train_file_path,
                array=train_arr,
            )
            save_numpy_array_data(
                self.data_preprocessing_config.preprocess_test_file_path,
                array=test_arr,
            )
            save_object(
                self.data_preprocessing_config.preprocessed_object_file_path,
                preprocessor_object,
            )

            # Saving preprocessed data artifact
            logging.info("Saving preprocessed data artifact at {}".format(
            self.data_preprocessing_config.preprocessed_object_file_path))
            data_preprocess_artifact = DataPreprocessArtifact(
                preprocessed_object_file_path=self.data_preprocessing_config.preprocessed_object_file_path,
                preprocessed_train_file_path=self.data_preprocessing_config.preprocess_train_file_path,
                preprocessed_test_file_path=self.data_preprocessing_config.preprocess_test_file_path,
            )
            logging.info(
                f"Data transformation artifact: {data_preprocess_artifact}")
            return data_preprocess_artifact
        except Exception as e:
            raise MalwareException(e, sys)
