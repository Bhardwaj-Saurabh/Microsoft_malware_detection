'''
This module contains data preprocessing pipeline which
used frequency enconding, ordinal encoding and minmaxscaler to
transform training and test data.

author: Saurabh Bhardwaj
date: October 2023
'''

from distutils import dir_util
from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.entity.artifact_entity import DataValidationArtifact, DataPreprocessArtifact
from src.entity.config_entity import DataPreprocessingConfig
from src.components.data_validation import DataValidation
from src.exception import MalwareException
from src.constant.training_pipeline import TARGET_COLUMN
from src.data_access.malware_data import MicrosoftMalwareData
from src.ml.preprocessor.preprocess import (FrequencyEncodingTransformer,
                                            MissingValueTreatmentTransformer,
                                            LabelEncoderTransformer)

from src.ml.preprocessor.preprocess import OrdinalEncoderTransformer, TargetEncoderTransformer
from src.logger import logging
from src.utils.main_utils import reduce_mem_usage, save_numpy_array_data, save_object
from src.utils.main_utils import read_yaml_file, write_yaml_file
import pandas as pd
from pandas import DataFrame
import os
import sys
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder
from feature_engine.encoding import CountFrequencyEncoder
from feature_engine.encoding import OrdinalEncoder
from feature_engine.selection import DropFeatures


class DataPreprocess:

    def __init__(self, data_validation_artifact: DataValidationArtifact,
                 data_preprocessing_config: DataPreprocessingConfig):
        try:
            self.data_validation_artifact = data_validation_artifact
            self.data_preprocessing_config = data_preprocessing_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e, sys)

    def pre_processor(self):
        # na value treatment
        try:
            # Define the pipeline
            pipeline = Pipeline([
                # ================= Frequency Encoding ====================
                ('frequency_encoding', CountFrequencyEncoder(
                    variables=self._schema_config['frequency_columns'],
                    missing_values='ignore')),  # Custom frequency encoding step
                # ================== Label Encoding ====================
                ('label_encoding', OrdinalEncoderTransformer(
                    variables=self._schema_config['categorical_columns'])),  # Custom label encoding step
                # ================= Min Max Scaler ====================
                # Custom min max scaler step
                ('min_max_scaler', MinMaxScaler()),
            ])
            return pipeline

        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_data_preprocessing(self) -> DataPreprocessArtifact:
        try:

            train_df = MicrosoftMalwareData(
                self.data_validation_artifact.valid_train_file_path).read_data()
            test_df = MicrosoftMalwareData(
                self.data_validation_artifact.valid_test_file_path).read_data()

            preprocessor = self.pre_processor()

            # training dataframe
            input_feature_train_df = train_df.drop(
                columns=TARGET_COLUMN, axis=1)
            target_feature_train_df = train_df[TARGET_COLUMN]

            # testing dataframe
            input_feature_test_df = test_df.drop(columns=TARGET_COLUMN, axis=1)
            target_feature_test_df = test_df[TARGET_COLUMN]

            for col in self._schema_config['categorical_columns'] + \
                    self._schema_config['frequency_columns']:
                input_feature_train_df[col] = input_feature_train_df[col].astype(
                    'category')

            for col in self._schema_config['categorical_columns'] + \
                    self._schema_config['frequency_columns']:
                input_feature_test_df[col] = input_feature_test_df[col].astype(
                    'category')

            preprocessor_object = preprocessor.fit(
                input_feature_train_df, target_feature_train_df)
            preprocessed_input_train_feature = preprocessor_object.transform(
                input_feature_train_df)
            preprocessed_input_test_feature = preprocessor_object.transform(
                input_feature_test_df)

            train_arr = np.c_[
                preprocessed_input_train_feature,
                np.array(target_feature_train_df)]
            test_arr = np.c_[
                preprocessed_input_test_feature,
                np.array(target_feature_test_df)]

            # save numpy array data
            save_numpy_array_data(
                self.data_preprocessing_config.preprocess_train_file_path,
                array=train_arr,
            )
            save_numpy_array_data(
                self.data_preprocessing_config.preprocess_test_file_path,
                array=test_arr,
            )
            save_object(
                self.data_preprocessing_config.preprocessed_object_file_path,
                preprocessor_object,
            )

            # preparing artifact
            data_preprocess_artifact = DataPreprocessArtifact(
                preprocessed_object_file_path=self.data_preprocessing_config.preprocessed_object_file_path,
                preprocessed_train_file_path=self.data_preprocessing_config.preprocess_train_file_path,
                preprocessed_test_file_path=self.data_preprocessing_config.preprocess_test_file_path,
            )
            logging.info(
                f"Data transformation artifact: {data_preprocess_artifact}")
            return data_preprocess_artifact
        except Exception as e:
            raise MalwareException(e, sys) from e
