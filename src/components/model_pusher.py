'''
This module contains model pusher pipeline which
checks and push the best best to the model registry

author: Saurabh Bhardwaj
date: October 2023
'''

import os
import sys
import shutil

from src.logger import logging
from src.exception import MalwareException
from src.entity.artifact_entity import ModelPusherArtifact, ModelEvaluationArtifact
from src.entity.config_entity import ModelPusherConfig


class ModelPusher:
    '''
    Class for model pushing.
    '''

    def __init__(self,
                 model_pusher_config: ModelPusherConfig,
                 model_eval_artifact: ModelEvaluationArtifact):
        """
        Initialize the ModelPusher class.

        Args:
            model_pusher_config (ModelPusherConfig): Model pusher configuration.
            model_eval_artifact (ModelEvaluationArtifact): Model evaluation artifact.

        Raises:
            MalwareException: If an exception occurs during initialization.
        """
        try:
            self.model_pusher_config = model_pusher_config
            self.model_eval_artifact = model_eval_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_model_pusher(self) -> ModelPusherArtifact:
        """
        Perform model pushing.

        Returns:
            ModelPusherArtifact: Model pusher artifact.

        Raises:
            MalwareException: If an exception occurs during model pushing.
        """
        try:
            logging.info(
                "Entered the initiate_model_pusher method of ModelPusher class")
            trained_model_path = self.model_eval_artifact.trained_model_path

            # Creating model pusher dir to save the model
            logging.info("Creating model pusher directory to save the model")
            model_file_path = self.model_pusher_config.model_file_path
            os.makedirs(os.path.dirname(model_file_path), exist_ok=True)
            shutil.copy(src=trained_model_path, dst=model_file_path)

            # Saved model dir
            logging.info("Creating saved model directory to save the model")
            saved_model_path = self.model_pusher_config.saved_model_path
            os.makedirs(os.path.dirname(saved_model_path), exist_ok=True)
            shutil.copy(src=trained_model_path, dst=saved_model_path)

            # Prepare artifact
            logging.info("Saving Model Pusher Artifact")
            model_pusher_artifact = ModelPusherArtifact(
                saved_model_path=saved_model_path, model_file_path=model_file_path)
            return model_pusher_artifact
        except Exception as e:
            raise MalwareException(e, sys)
