'''
This module contains data ingestion pipeline which drop missing values
and split data into train and test set

author: Saurabh Bhardwaj
date: October 2023
'''

import os
import sys
import pandas as pd
from pandas import DataFrame

from src.exception import MalwareException
from src.logger import logging
from src.entity.config_entity import DataIngestionConfig
from src.entity.artifact_entity import DataIngestionArtifact

from src.data_access.malware_data import MicrosoftMalwareData
from src.utils.main_utils import read_yaml_file
from src.constant.training_pipeline import SCHEMA_FILE_PATH, FILE_PATH, RANDOM_STATE
from sklearn.model_selection import train_test_split
from src.ml.preprocessor.preprocess import FeatureEngineeringTransformer


class DataIngestion:
    '''
    Class to start data ingestion
    '''

    def __init__(self, data_ingestion_config: DataIngestionConfig):
        try:
            self.data_ingestion_config = data_ingestion_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e, sys)

    def export_data_into_feature_store(self, file_path=FILE_PATH) -> DataFrame:
        """
        Export mongo db collection record as data frame into feature
        """
        try:
            logging.info("Exporting data from data store to feature store")
            microsoft_data = MicrosoftMalwareData(file_path).read_data()
            microsoft_data.drop_duplicates(inplace=True)
            microsoft_data = microsoft_data.drop(
                columns=self._schema_config['drop_columns_eda'], axis=1)
            microsoft_data = microsoft_data.dropna()
            microsoft_data = FeatureEngineeringTransformer(microsoft_data)
            microsoft_data = microsoft_data.drop(
                columns=self._schema_config['drop_columns_stats'], axis=1)

            feature_store_file_path = self.data_ingestion_config.feature_store_file_path

            logging.info("Creating directory for ingested data")
            # creating folder
            dir_path = os.path.dirname(feature_store_file_path)
            os.makedirs(dir_path, exist_ok=True)
            microsoft_data.to_csv(feature_store_file_path,
                                  index=False, header=True)
            return microsoft_data
        except Exception as e:
            raise MalwareException(e, sys)

    def split_data_as_train_test(self, dataframe: DataFrame) -> None:
        """
        Feature store dataset will be split into train and test file
        """

        try:
            train_set, test_set = train_test_split(
                dataframe, test_size=self.data_ingestion_config.train_test_split_ratio,
                random_state=RANDOM_STATE
            )

            logging.info("Performed train test split on the dataframe")
            logging.info(
                "Exited split_data_as_train_test method of Data_Ingestion class"
            )
            dir_path = os.path.dirname(
                self.data_ingestion_config.training_file_path)
            os.makedirs(dir_path, exist_ok=True)
            logging.info(f"Exporting train and test file path.")
            train_set.to_csv(
                self.data_ingestion_config.training_file_path,
                index=False,
                header=True)
            test_set.to_csv(
                self.data_ingestion_config.testing_file_path,
                index=False,
                header=True)
            logging.info(f"Exported train and test file path.")
        except Exception as e:
            raise MalwareException(e, sys)

    def initiate_data_ingestion(self) -> DataIngestionArtifact:
        try:
            dataframe = self.export_data_into_feature_store()
            self.split_data_as_train_test(dataframe=dataframe)

            data_ingestion_artifact = DataIngestionArtifact(
                trained_file_path=self.data_ingestion_config.training_file_path,
                test_file_path=self.data_ingestion_config.testing_file_path)
            return data_ingestion_artifact
        except Exception as e:
            raise MalwareException(e, sys)
