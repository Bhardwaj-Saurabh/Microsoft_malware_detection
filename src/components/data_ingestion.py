from src.exception import MalwareException
from src.logger import logging
from src.entity.config_entity import DataIngestionConfig
from src.entity.artifact_entity import DataIngestionArtifact
from src.utils.main_utils import reduce_mem_usage
import os,sys
from pandas import DataFrame
from src.data_access.malware_data import MicrosoftMalwareData
from src.utils.main_utils import write_yaml_file, read_yaml_file
from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.constant.training_pipeline import FILE_PATH


class DataIngestion:

    def __init__(self,data_ingestion_config:DataIngestionConfig):
        try:
            self.data_ingestion_config=data_ingestion_config
            self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)
        except Exception as e:
            raise MalwareException(e,sys)

    def get_columns_to_keep(self, train:DataFrame):
        '''
        Return the list of columns name to keep in the ingested data frame
        '''
        try:
            logging.info('Getting the final columns name to keep')
            logging.info(' Removing the columns with more than 90% missing values')
            report = {}
            cols_to_keep = list(train.columns)
            for col in train.columns:
                missing_share = train[col].isnull().sum()/train.shape[0]
                if missing_share > 0.9:
                    cols_to_keep.remove(col)
                    report[col] = str(missing_share)
                    logging.info(f'{col} removed from the list as percentage of missing value is {missing_share}')

            # Drop the columns where one category contains more than 90% values
            logging.info(' Removing the columns with more than 90% single value')
            for col in cols_to_keep:
                rate = train[col].value_counts(normalize=True, dropna=False).values[0]
                if rate > 0.9:
                    cols_to_keep.remove(col)
                    report[col] = str(rate)
                    logging.info(f'{col} removed from the list as percentage of single value in {col} is {rate}')

            # Drop the columns which have only one unique value
            logging.info(' Removing the columns with single value')
            for col in cols_to_keep:
                unique_value = train[col].nunique()
                if unique_value == 1:
                    cols_to_keep.remove(col)
                    report[col] = str(unique_value)
                    logging.info(f'{col} removed from the list as {col} has one single value')


            logging.info("Creating directory for ingested report")
            ingestion_report_file_path = self.data_ingestion_config.ingestion_report_file_path
            #Create directory
            dir_path = os.path.dirname(ingestion_report_file_path)
            os.makedirs(dir_path,exist_ok=True)

            logging.info("Writing the ingestion report")
            write_yaml_file(file_path=ingestion_report_file_path,content=report,)

            logging.info(f'The final columns to keep in the dataset are {cols_to_keep}')
            return cols_to_keep
        except Exception as e:
            raise MalwareException(e, sys)

    def export_data_into_feature_store(self, file_path = FILE_PATH) -> DataFrame:
        """
        Export mongo db collection record as data frame into feature
        """
        try:
            logging.info("Exporting data from data store to feature store")
            microsoft_data = MicrosoftMalwareData(file_path).read_data()
            feature_store_file_path = self.data_ingestion_config.feature_store_file_path          
            
            logging.info("Creating directory for ingested data")
            #creating folder
            dir_path = os.path.dirname(feature_store_file_path)
            os.makedirs(dir_path,exist_ok=True)
            microsoft_data.to_csv(feature_store_file_path, index=False, header=True)
            return microsoft_data
        except  Exception as e:
            raise  MalwareException(e, sys)

    def update_column_type_into_report_file(self, df:DataFrame)->None:
        """
        Update the schema file with correct categorical and binary columns info
        """
        try:
            ingestion_report_file_path = self.data_ingestion_config.ingestion_report_file_path
            true_numerical_columns = self._schema_config['numerical_columns']

            logging.info("Getting bianry columns from the dataframe")

            # Binary columns
            binary_columns = {}
            binary_columns_list = [c for c in df.columns if df[c].nunique() == 2]
            binary_columns['binary_columns'] = binary_columns_list
            write_yaml_file(file_path=ingestion_report_file_path,content=binary_columns,)
            logging.info("Binanry columns added to SCHEMA file")

            logging.info("Getting  categorical columns from the dataframe")
            # Categorical columns
            categorical_columns = {}
            categorical_columns_list = [c for c in df.columns 
                                if (c not in true_numerical_columns) & (c not in binary_columns_list)]
            categorical_columns['categorical_columns'] = categorical_columns_list
            
            write_yaml_file(file_path=ingestion_report_file_path,content=categorical_columns,)
            logging.info("Categorical columns added to SCHEMA file")

        except  Exception as e:
            raise  MalwareException(e, sys)

    def initiate_data_ingestion(self) -> DataIngestionArtifact:
        try:
            dataframe = self.export_data_into_feature_store()
            dataframe.drop(self._schema_config['drop_columns'], axis = 1, inplace = True)
            cols_to_keep = self.get_columns_to_keep(dataframe)
            dataframe = dataframe[cols_to_keep]
            dataframe = reduce_mem_usage(dataframe)
            #dataframe = dataframe.drop(self._schema_config["drop_columns"],axis=1)
            self.update_column_type_into_report_file(dataframe)

            ingested_data_store_path = self.data_ingestion_config.ingested_data_store_path          

            #creating folder
            dir_path = os.path.dirname(ingested_data_store_path)
            os.makedirs(dir_path,exist_ok=True)
            dataframe.to_csv(ingested_data_store_path, index=False, header=True)
            
            data_ingestion_artifact = DataIngestionArtifact(
                feature_store_file_path=self.data_ingestion_config.feature_store_file_path,
                ingested_data_store_path = self.data_ingestion_config.ingested_data_store_path,
                ingestion_report_file_path=self.data_ingestion_config.ingestion_report_file_path)
            return data_ingestion_artifact
        except Exception as e:
            raise MalwareException(e,sys)