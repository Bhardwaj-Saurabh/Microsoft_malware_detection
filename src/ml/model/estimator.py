'''
This module contains model resolver and model evaluation pipeline.

Author: Saurabh bhardwaj
Date: Oct 2023
'''

import os
from src.constant.training_pipeline import SAVED_MODEL_DIR, MODEL_FILE_NAME


class MalwareModel:
    """
    Class for making predictions using a model and preprocessor.
    """

    def __init__(self, model, preprocessor):
        """
        Initialize the MalwareModel.

        Args:
            model: The machine learning model for making predictions.
            preprocessor: Data preprocessor used to transform input data.

        Raises:
            Exception: If an exception occurs during initialization.
        """
        try:
            self.model = model
            self.preprocessor = preprocessor
        except Exception as e:
            raise e

    def predict(self, x):
        """
        Make predictions using the model and preprocessor.

        Args:
            x: Input data to make predictions on.

        Returns:
            y_hat: Predicted labels.

        Raises:
            Exception: If an exception occurs during prediction.
        """
        try:
            x_transform = self.preprocessor.transform(x)
            y_hat = self.model.predict(x_transform)
            return y_hat
        except Exception as e:
            raise e


class ModelResolver:
    """
    Class for resolving and checking the existence of saved machine learning models.
    """

    def __init__(self, model_dir=SAVED_MODEL_DIR):
        """
        Initialize the ModelResolver.

        Args:
            model_dir (str): The directory where saved models are stored.

        Raises:
            Exception: If an exception occurs during initialization.
        """
        try:
            self.model_dir = model_dir
        except Exception as e:
            raise e

    def get_best_model_path(self) -> str:
        """
        Get the file path of the best (latest) saved model.

        Returns:
            str: The file path of the best (latest) saved model.

        Raises:
            Exception: If an exception occurs while getting the best model path.
        """
        try:
            timestamps = list(map(int, os.listdir(self.model_dir)))
            latest_timestamp = max(timestamps)
            latest_model_path = os.path.join(
                self.model_dir, f"{latest_timestamp}", MODEL_FILE_NAME)
            return latest_model_path
        except Exception as e:
            raise e

    def is_model_exists(self) -> bool:
        """
        Check if saved models exist in the specified directory.

        Returns:
            bool: True if saved models exist, False otherwise.

        Raises:
            Exception: If an exception occurs while checking the existence of saved models.
        """
        try:
            if not os.path.exists(self.model_dir):
                return False

            timestamps = os.listdir(self.model_dir)
            if len(timestamps) == 0:
                return False

            latest_model_path = self.get_best_model_path()

            if not os.path.exists(latest_model_path):
                return False

            return True
        except Exception as e:
            raise e
