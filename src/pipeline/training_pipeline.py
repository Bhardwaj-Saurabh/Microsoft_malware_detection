'''
This module support to run the complete pipeline starting from dataingestion to model pusher.

author: Saurabh Bhardwaj
date: October 2023
'''

# import necessary libraries and modeules
import sys
from src.entity.config_entity import (TrainingPipelineConfig,
                                      DataIngestionConfig,
                                      DataValidationConfig,
                                      DataPreprocessingConfig,
                                      ModelTrainerConfig,
                                      ModelEvaluationConfig,
                                      ModelPusherConfig)
from src.entity.artifact_entity import (DataIngestionArtifact,
                                        DataValidationArtifact,
                                        DataPreprocessArtifact,
                                        ModelEvaluationArtifact,
                                        ModelTrainerArtifact)
from src.components.data_ingestion import DataIngestion
from src.components.data_validation import DataValidation
from src.components.data_preprocessing import DataPreprocess
from src.components.model_trainer import ModelTrainer
from src.components.model_evaluation import ModelEvaluation
from src.components.model_pusher import ModelPusher
from src.exception import MalwareException
from src.logger import logging


class TrainPipeline:
    """
    A pipeline for running various stages of a machine learning project.

    This class orchestrates the entire training pipeline, 
    including data ingestion, validation, preprocessing,
    model training, evaluation, and model deployment.

    Attributes:
        is_pipeline_running (bool): Flag to check if the pipeline is running.

    Methods:
        start_data_ingestion(): Starts the data ingestion process.
        start_data_validation(data_ingestion_artifact): Starts data validation.
        start_data_preprocessing(data_validation_artifact): Starts data preprocessing.
        start_model_trainer(data_preprocess_artifact): Starts model training.
        start_model_evaluation(data_validation_artifact, model_trainer_artifact): 
                                                        Starts model evaluation.
        start_model_pusher(model_eval_artifact): Starts model deployment.
        run_pipeline(): Runs the entire training pipeline.

    Example:
        pipeline = TrainPipeline()
        pipeline.run_pipeline()
    """

    is_pipeline_running = False

    def __init__(self):
        """
        Initialize the TrainPipeline.
        """
        self.training_pipeline_config = TrainingPipelineConfig()

    def start_data_ingestion(self) -> DataIngestionArtifact:
        """
        Start the data ingestion process.

        Returns:
            DataIngestionArtifact: Artifact containing data ingestion information.
        """
        try:
            self.data_ingestion_config = DataIngestionConfig(
                training_pipeline_config=self.training_pipeline_config)
            logging.info("Starting data ingestion")
            data_ingestion = DataIngestion(
                data_ingestion_config=self.data_ingestion_config)
            data_ingestion_artifact = data_ingestion.initiate_data_ingestion()
            logging.info(
                f"Data ingestion completed and artifact: {data_ingestion_artifact}")
            return data_ingestion_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def start_data_validation(
            self,
            data_ingestion_artifact: DataIngestionArtifact) -> DataValidationArtifact:
        """
        Start data validation.

        Args:
            data_ingestion_artifact (DataIngestionArtifact): Artifact from data ingestion.

        Returns:
            DataValidationArtifact: Artifact containing data validation information.
        """
        try:
            data_validation_config = DataValidationConfig(
                training_pipeline_config=self.training_pipeline_config)
            data_validation = DataValidation(
                data_ingestion_artifact=data_ingestion_artifact,
                data_validation_config=data_validation_config)
            data_validation_artifact = data_validation.initiate_data_validation()
            return data_validation_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def start_data_preprocessing(
            self,
            data_validation_artifact: DataValidationArtifact) -> DataPreprocessArtifact:
        """
        Start data preprocessing.

        Args:
            data_validation_artifact (DataValidationArtifact): Artifact from data validation.

        Returns:
            DataPreprocessArtifact: Artifact containing data preprocessing information.
        """
        try:
            data_preprocessing_config = DataPreprocessingConfig(
                training_pipeline_config=self.training_pipeline_config)
            data_preprocess = DataPreprocess(
                data_validation_artifact=data_validation_artifact,
                data_preprocessing_config=data_preprocessing_config)
            data_preprocess_artifact = data_preprocess.initiate_data_preprocessing()
            return data_preprocess_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def start_model_trainer(
            self,
            data_preprocess_artifact: DataPreprocessArtifact):
        """
        Start model training.

        Args:
            data_preprocess_artifact (DataPreprocessArtifact): Artifact from data preprocessing.

        Returns:
            ModelTrainerArtifact: Artifact containing model training information.
        """
        try:
            model_trainer_config = ModelTrainerConfig(
                training_pipeline_config=self.training_pipeline_config)
            model_trainer = ModelTrainer(
                model_trainer_config, data_preprocess_artifact)
            model_trainer_artifact = model_trainer.initiate_model_trainer()
            return model_trainer_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def start_model_evaluation(
            self,
            data_validation_artifact: DataValidationArtifact,
            model_trainer_artifact: ModelTrainerArtifact):
        """
        Start model evaluation.

        Args:
            data_validation_artifact (DataValidationArtifact): Artifact from data validation.
            model_trainer_artifact (ModelTrainerArtifact): Artifact from model training.

        Returns:
            ModelEvaluationArtifact: Artifact containing model evaluation information.
        """
        try:
            model_eval_config = ModelEvaluationConfig(
                self.training_pipeline_config)
            model_eval = ModelEvaluation(
                model_eval_config,
                data_validation_artifact,
                model_trainer_artifact)
            model_eval_artifact = model_eval.initiate_model_evaluation()
            return model_eval_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def start_model_pusher(self, model_eval_artifact: ModelEvaluationArtifact):
        """
        Start model deployment.

        Args:
            model_eval_artifact (ModelEvaluationArtifact): Artifact from model evaluation.

        Returns:
            ModelPusherArtifact: Artifact containing model deployment information.
        """
        try:
            model_pusher_config = ModelPusherConfig(
                training_pipeline_config=self.training_pipeline_config)
            model_pusher = ModelPusher(
                model_pusher_config, model_eval_artifact)
            model_pusher_artifact = model_pusher.initiate_model_pusher()
            return model_pusher_artifact
        except Exception as e:
            raise MalwareException(e, sys)

    def run_pipeline(self):
        """
        Run the entire training pipeline.

        Raises:
            MalwareException: If any exception occurs during the pipeline.
        """
        try:
            logging.info("Starting training pipeline")
            data_ingestion_artifact = self.start_data_ingestion()

            logging.info("Starting data validation")
            data_validation_artifact = self.start_data_validation(
                data_ingestion_artifact=data_ingestion_artifact)
            logging.info("Starting data preprocessing")
            data_preprocess_artifact = self.start_data_preprocessing(
                data_validation_artifact=data_validation_artifact)
            logging.info("Starting model training")
            model_trainer_artifact = self.start_model_trainer(
                data_preprocess_artifact=data_preprocess_artifact)
            logging.info("Starting model evaluation")
            model_eval_artifact = self.start_model_evaluation(
                data_validation_artifact, model_trainer_artifact)
            logging.info("Checking if trained model is better than best model")
            if not model_eval_artifact.is_model_accepted:
                raise Exception(
                    "Trained model is not better than the best model")
            logging.info("Starting model deployment")
            model_pusher_artifact = self.start_model_pusher(
                model_eval_artifact)
        except Exception as e:
            raise MalwareException(e, sys)
