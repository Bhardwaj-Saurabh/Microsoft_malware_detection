
from src.entity.config_entity import TrainingPipelineConfig, DataIngestionConfig, DataValidationConfig, DataPreprocessingConfig
from src.entity.config_entity import DataTransformationConfig, ModelTrainerConfig
from src.entity.artifact_entity import DataIngestionArtifact, DataValidationArtifact
from src.entity.artifact_entity import DataTransformationArtifact, DataPreprocessArtifact
from src.components.data_ingestion import DataIngestion
from src.components.data_validation import DataValidation
from src.components.data_preprocessing import DataPreprocess
from src.components.data_transformation import DataTransformation
from src.components.model_trainer import ModelTrainer
from src.exception import MalwareException
import sys,os
from src.logger import logging
from src.constant.training_pipeline import SAVED_MODEL_DIR

class TrainPipeline:
    is_pipeline_running=False
    def __init__(self):
        self.training_pipeline_config = TrainingPipelineConfig()

    def start_data_ingestion(self) -> DataIngestionArtifact:
        try:
            self.data_ingestion_config = DataIngestionConfig(training_pipeline_config=self.training_pipeline_config)
            logging.info("Starting data ingestion")
            data_ingestion = DataIngestion(data_ingestion_config=self.data_ingestion_config)
            data_ingestion_artifact = data_ingestion.initiate_data_ingestion()
            logging.info(f"Data ingestion completed and artifact: {data_ingestion_artifact}")
            return data_ingestion_artifact
        except  Exception as e:
            raise  MalwareException(e,sys)

    def start_data_validation(self, data_ingestion_artifact:DataIngestionArtifact)->DataValidationArtifact:
        try:
            data_validation_config = DataValidationConfig(training_pipeline_config=self.training_pipeline_config)
            data_validation = DataValidation(data_ingestion_artifact=data_ingestion_artifact,
            data_validation_config = data_validation_config
            )
            data_validation_artifact = data_validation.initiate_data_validation()
            return data_validation_artifact
        except  Exception as e:
            raise  MalwareException(e,sys)
        
    def start_data_preprocessing(self, data_validation_artifact:DataValidationArtifact)->DataPreprocessArtifact:
        try:
            data_preprocessing_config = DataPreprocessingConfig(training_pipeline_config=self.training_pipeline_config)
            data_preprocess = DataPreprocess(data_validation_artifact=data_validation_artifact,
                                             data_preprocessing_config=data_preprocessing_config)
            data_preprocess_artifact = data_preprocess.initiate_data_preprocessing()
            return data_preprocess_artifact
        except  Exception as e:
            raise  MalwareException(e,sys)

    def start_data_transformation(self, data_preprocess_artifact:DataPreprocessArtifact,
                                  data_ingestion_artifact:DataIngestionArtifact)->DataTransformationArtifact:
        try:
            data_transformation_config = DataTransformationConfig(training_pipeline_config=self.training_pipeline_config)
            data_transformation = DataTransformation(data_preprocess_artifact=data_preprocess_artifact,
                                                     data_ingestion_artifact=data_ingestion_artifact,
                                                     data_transformation_config=data_transformation_config
                                                     )
            data_transformation_artifact =  data_transformation.initiate_data_transformation()
            return data_transformation_artifact
        except  Exception as e:
            raise  MalwareException(e,sys)
    
    def start_model_trainer(self, data_transformation_artifact:DataTransformationArtifact):
        try:
            model_trainer_config = ModelTrainerConfig(training_pipeline_config=self.training_pipeline_config)
            model_trainer = ModelTrainer(model_trainer_config, data_transformation_artifact)
            model_trainer_artifact = model_trainer.initiate_model_trainer()
            return model_trainer_artifact
        except  Exception as e:
            raise  MalwareException(e,sys)

    def start_model_evaluation(self):
        try:
            pass
        except  Exception as e:
            raise  MalwareException(e,sys)

    def start_model_pusher(self):
        try:
            pass
        except  Exception as e:
            raise  MalwareException(e,sys)

    def run_pipeline(self):
        try:
            data_ingestion_artifact:DataIngestionArtifact = self.start_data_ingestion()
            data_validation_artifact:DataValidationArtifact=self.start_data_validation(data_ingestion_artifact=data_ingestion_artifact)
            data_preprocess_artifact:DataPreprocessArtifact = self.start_data_preprocessing(data_validation_artifact=data_validation_artifact)
            data_transformation_artifact:DataTransformationArtifact = self.start_data_transformation(data_preprocess_artifact=data_preprocess_artifact, 
                                                                                                     data_ingestion_artifact=data_ingestion_artifact)
            model_trainer_artifact = self.start_model_trainer(data_transformation_artifact=data_transformation_artifact)
        except  Exception as e:
            raise  MalwareException(e,sys)