
import sys

from src.logger import logging 
from src.exception import MalwareException 
from src.utils.main_utils import load_object
from src.ml.model.estimator import ModelResolver
from src.constant.training_pipeline import SAVED_MODEL_DIR
from src.utils.main_utils import read_yaml_file
from src.constant.training_pipeline import SCHEMA_FILE_PATH
from src.ml.preprocessor.preprocess import FeatureEngineeringTransformer


class PredictPipeline:
    """
    A pipeline for making predictions using pre-trained models.

    Attributes:
        None
    """
    def __init__(self):
        """
        Initializes a PredictPipeline object.
        """
        self._schema_config = read_yaml_file(SCHEMA_FILE_PATH)

    def predict(self, microsoft_data):
        """
        Predicts the target variable using the provided features.

        Args:
            features: A list or array-like object containing the input features.

        Returns:
            The predicted target variable.

        Raises:
            CustomException: If an exception occurs during the prediction process.
        """
        try:
            logging.info("Dropping columns identified during EDA")
            microsoft_data = microsoft_data.drop(
                columns=self._schema_config['drop_columns_eda'], axis=1)
            logging.info("Dropping rows with missing values")
            microsoft_data = microsoft_data.dropna()
            logging.info("Engineering features from the dataset")
            microsoft_data = FeatureEngineeringTransformer(microsoft_data)
            logging.info(
                "Dropping columns identified during feature engineering")
            microsoft_data = microsoft_data.drop(
                columns=self._schema_config['drop_columns_stats'], axis=1)
            
            # Paths to pre-trained models
            model_resolver = ModelResolver(model_dir=SAVED_MODEL_DIR)

            if not model_resolver.is_model_exists():
                return "Model is not available"
            
            best_model_path = model_resolver.get_best_model_path()
            model = load_object(file_path=best_model_path)
            y_pred = model.predict(microsoft_data)
            microsoft_data['predicted_column'] = y_pred
            return microsoft_data
        except Exception as e:
            logging.info("Exception occurred in prediction")
            raise MalwareException(e, sys)
